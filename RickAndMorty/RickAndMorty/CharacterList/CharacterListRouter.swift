//
//  CharacterListRouter.swift
//  RickAndMorty
//
//  Created by  Oleksandra on 07.04.2025.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

@objc protocol CharacterListRoutingLogic {
    func routeToCharacterDetail(characterID: Int)
}

protocol CharacterListDataPassing {
    var dataStore: CharacterListDataStore? { get }
}

protocol CharacterListRouterProtocol: CharacterListRoutingLogic, CharacterListDataPassing { }

class CharacterListRouter: CharacterListRoutingLogic, CharacterListDataPassing {
    weak var viewController: CharacterListViewController?
    var dataStore: CharacterListDataStore?
    
    // MARK: - Routing
    func routeToCharacterDetail(characterID: Int) {
        let destinationInteractor = CharacterDetailsInteractor(networkService: NetworkService(),
                                                               persistenceService: CharacterPersistenceService(),
                                                               characterID: characterID)
        let destinationPresenter = CharacterDetailsPresenter()
        let destinationRouter = CharacterDetailsRouter()

        let destinationVC = CharacterDetailsViewController(interactor: destinationInteractor, router: destinationRouter)
        
        destinationInteractor.presenter = destinationPresenter
        destinationPresenter.viewController = destinationVC
        destinationRouter.viewController = destinationVC
        destinationRouter.dataStore = destinationInteractor

        navigateToCharacterDetails(source: viewController!, destination: destinationVC)
    }
    
    // MARK: - Navigation
    
    func navigateToCharacterDetails(source: CharacterListViewController, destination: CharacterDetailsViewController) {
        source.navigationController?.pushViewController(destination, animated: true)
    }
}
