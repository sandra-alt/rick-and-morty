//
//  CharacterListViewController.swift
//  RickAndMorty
//
//  Created by  Oleksandra on 07.04.2025.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CharacterListDisplayLogic: AnyObject {
    func displayCharacters(viewModel: CharacterList.FetchCharacters.ViewModel)
}

class CharacterListViewController: UIViewController, CharacterListDisplayLogic {
    
    private var interactor: CharacterListBusinessLogic?
    private var router: (CharacterListRoutingLogic & CharacterListDataPassing)?
    
    private let tableView = UITableView()
    
    private let loadingIndicator: UIActivityIndicatorView = {
        let indicator = UIActivityIndicatorView(style: .large)
        indicator.hidesWhenStopped = true
        indicator.color = .gray
        indicator.translatesAutoresizingMaskIntoConstraints = false
        return indicator
    }()
    
    private let emptyStateLabel: UILabel = {
        let label = UILabel()
        label.translatesAutoresizingMaskIntoConstraints = false
        label.textAlignment = .center
        label.font = UIFont.systemFont(ofSize: 18, weight: .medium)
        label.textColor = .gray
        label.numberOfLines = 0
        return label
    }()
    
    private var characters: [CharacterList.FetchCharacters.ViewModel.CharacterViewModel] = []
    
    // MARK: - Lifecycle
    init(interactor: CharacterListBusinessLogic, router: (CharacterListRoutingLogic & CharacterListDataPassing)) {
        super.init(nibName: nil, bundle: nil)
        self.interactor = interactor
        self.router = router
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }
    
    // MARK: - Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        title = "Rick and Morty Characters"
        setupTableView()
        setupEmptyStateView()
        setupLoadingIndicator()
        fetchCharacters()
    }
    
    private func setupTableView() {
        view.addSubview(tableView)
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.bindFrameToSuperview()
        tableView.separatorStyle = .none
        
        tableView.register(CharacterCell.self, forCellReuseIdentifier: CharacterCell.reuseIdentifier)
        tableView.delegate = self
        tableView.dataSource = self
    }
    
    private func setupEmptyStateView() {
        view.addSubview(emptyStateLabel)
        
        NSLayoutConstraint.activate([
            emptyStateLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            emptyStateLabel.centerYAnchor.constraint(equalTo: view.centerYAnchor),
        ])
    }
    
    private func setupLoadingIndicator() {
        view.addSubview(loadingIndicator)
        
        NSLayoutConstraint.activate([
            loadingIndicator.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            loadingIndicator.centerYAnchor.constraint(equalTo: view.centerYAnchor)
        ])
    }
    
    private func fetchCharacters() {
        displayLoading()
        interactor?.fetchCharacters(request: CharacterList.FetchCharacters.Request(page: 1))
    }
    
    // MARK: - Display logic
    func displayCharacters(viewModel: CharacterList.FetchCharacters.ViewModel) {
        DispatchQueue.main.async { [weak self] in
            self?.loadingIndicator.stopAnimating()
            
            if viewModel.characters.isEmpty {
                self?.displayEmptyState(message: "No characters to display")
            } else {
                self?.characters = viewModel.characters
                self?.tableView.reloadData()
            }
        }
    }
    
    private func displayLoading() {
        emptyStateLabel.isHidden = true
        loadingIndicator.startAnimating()
    }
    
    private func displayEmptyState(message: String) {
        loadingIndicator.stopAnimating()
        
        tableView.isHidden = true
        emptyStateLabel.text = message
        emptyStateLabel.isHidden = false
    }
}

// MARK: - UITableViewDataSource & UITableViewDelegate
extension CharacterListViewController: UITableViewDataSource, UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return characters.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: CharacterCell.reuseIdentifier, for: indexPath) as? CharacterCell else {
            return UITableViewCell()
        }
        
        let character = characters[indexPath.row]
        cell.configure(with: character)
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        
        let characterID = characters[indexPath.row].id
        router?.routeToCharacterDetail(characterID: characterID)
    }
}
