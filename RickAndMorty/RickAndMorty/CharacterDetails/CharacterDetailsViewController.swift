//
//  CharacterDetailsViewController.swift
//  RickAndMorty
//
//  Created by  Oleksandra on 07.04.2025.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher

protocol CharacterDetailsDisplayLogic: AnyObject {
    func displayCharacterDetails(viewModel: CharacterDetails.FetchCharacterDetails.ViewModel)
}

class CharacterDetailsViewController: UIViewController, CharacterDetailsDisplayLogic {
    
    // MARK: - Layout properties
    private struct Layout {
        static let spacing: CGFloat = 24.0
        static let margin: CGFloat = 32.0
        static let tileMargin: CGFloat = 16.0
        static let cornerRadius: CGFloat = 12.0
        static let imageSize: CGFloat = UIDevice.current.userInterfaceIdiom == .pad ? 300 : 200
        static let imageCornerRadius: CGFloat = 8.0
        
        static let tileColor1 = UIColor.gray.cgColor
        static let tileColor2 = UIColor.systemTeal.cgColor
        static let textColor = UIColor.white
        static let secondaryTextColor = UIColor.black
        static let nameFont = UIFont.systemFont(ofSize: 20, weight: .semibold)
        static let secondaryFont = UIFont.systemFont(ofSize: 16)
    }
    
    // MARK: - UI Components
    
    private let scrollView = UIScrollView()
    private let contentView = UIView()
    
    private lazy var gradientLayer: CAGradientLayer = {
        let gradient = CAGradientLayer()
        gradient.colors = [
            Layout.tileColor1,
            Layout.tileColor2
        ]
        gradient.startPoint = CGPoint(x: 0.0, y: 0.0)
        gradient.endPoint = CGPoint(x: 1.0, y: 1.0)
        gradient.cornerRadius = Layout.cornerRadius
        return gradient
    }()
    
    private lazy var vStack: UIStackView = {
        let view = UIStackView()
        view.axis = .vertical
        view.alignment = .center
        view.distribution = .fill
        view.spacing = Layout.spacing
        return view
    }()
    
    private lazy var characterImageView: UIImageView = {
        let view = UIImageView()
        view.contentMode = .scaleAspectFit
        view.clipsToBounds = true
        view.layer.cornerRadius = Layout.imageCornerRadius
        view.backgroundColor = .systemGray6
        return view
    }()
    
    private lazy var nameLabel: UILabel = {
        let label = UILabel()
        label.textColor = Layout.textColor
        label.font = Layout.nameFont
        label.numberOfLines = 0
        return label
    }()
    
    private lazy var tileView: UIView = {
        let view = UIView()
        view.backgroundColor = UIColor.white.withAlphaComponent(0.5)
        view.layer.cornerRadius = Layout.cornerRadius
        return view
    }()
    
    private lazy var tileVStack: UIStackView = {
        let view = UIStackView()
        view.axis = .vertical
        view.alignment = .fill
        view.distribution = .fill
        view.spacing = Layout.spacing
        return view
    }()
    
    private lazy var statusLabel = { UILabel() }()
    private lazy var speciesLabel = { UILabel() }()
    private lazy var genderLabel = { UILabel() }()
    private lazy var originLabel = { UILabel() }()
    private lazy var locationLabel = { UILabel() }()
    
    private var interactor: CharacterDetailsBusinessLogic?
    private var router: (CharacterDetailsRoutingLogic & CharacterDetailsDataPassing)?
    
    // MARK: - Initialization
    init(interactor: CharacterDetailsBusinessLogic, router: (NSObjectProtocol & CharacterDetailsRoutingLogic & CharacterDetailsDataPassing)?) {
        super.init(nibName: nil, bundle: nil)
        self.interactor = interactor
        self.router = router
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }
    
    // MARK: - Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .systemBackground
        setupViews()
        fetchCharacterDetails()
    }
    
    private func setupViews() {
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        contentView.translatesAutoresizingMaskIntoConstraints = false
        vStack.translatesAutoresizingMaskIntoConstraints = false
        tileVStack.translatesAutoresizingMaskIntoConstraints = false
        
        view.addSubview(scrollView)
        scrollView.addSubview(contentView)
        
        contentView.bindFrameToSuperview()
        scrollView.bindFrameToSuperview()
        
        view.layer.insertSublayer(gradientLayer, at: 0)
        
        [characterImageView, nameLabel, tileView].forEach {
            $0.translatesAutoresizingMaskIntoConstraints = false
            vStack.addArrangedSubview($0)
        }
        
        contentView.addSubview(vStack)
        vStack.bindFrameToSuperview(margin: Layout.margin)
        
        [speciesLabel, statusLabel, genderLabel, originLabel, locationLabel].forEach {
            $0.textColor = Layout.secondaryTextColor
            $0.font = Layout.secondaryFont
            $0.numberOfLines = 0
            $0.translatesAutoresizingMaskIntoConstraints = false
            tileVStack.addArrangedSubview($0)
        }
        
        tileView.addSubview(tileVStack)
        tileVStack.bindFrameToSuperview(margin: Layout.margin)
        
        NSLayoutConstraint.activate([
            contentView.widthAnchor.constraint(equalTo: scrollView.widthAnchor),
            
            characterImageView.widthAnchor.constraint(equalToConstant: Layout.imageSize),
            characterImageView.heightAnchor.constraint(equalToConstant: Layout.imageSize),
        ])
    }
    
    private func fetchCharacterDetails() {
        interactor?.fetchCharacterDetails()
    }

    // MARK: - Display logic
    func displayCharacterDetails(viewModel: CharacterDetails.FetchCharacterDetails.ViewModel) {
        nameLabel.text = viewModel.name
        statusLabel.text = viewModel.statusText
        speciesLabel.text = viewModel.speciesText
        genderLabel.text = viewModel.genderText
        originLabel.text = viewModel.originText
        locationLabel.text = viewModel.locationText
        characterImageView.kf.setImage(with: URL(string: viewModel.imageURL))
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        gradientLayer.frame = view.bounds
    }
}
